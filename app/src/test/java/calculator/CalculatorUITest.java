/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculator;

import org.junit.jupiter.api.Test;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

import javax.swing.JButton; // my buttons are part of JButtonl
import javax.swing.JPanel;
import java.awt.*;

import calculator.panels.*;
import calculator.utilities.OperatorHandler;

class CalculatorUITest {
    private static Calculator calculator;
    private static DisplayPanel displayPanel;
    private static NumberKeyPanel numberKeyPanel;
    private static BinaryOpPanel binaryOpPanel;
    private static OperatorHandler operatorHandler;
    private static JPanel centerRegionPanel;

    @BeforeAll
    public static void setUpClass() {
        calculator = new Calculator();
        displayPanel = new DisplayPanel();
        operatorHandler = new OperatorHandler(displayPanel.getDisplay()); // Assumes DisplayPanel has a method
                                                                          // getDisplay() returning the JTextField
        numberKeyPanel = new NumberKeyPanel(operatorHandler);
        centerRegionPanel = new JPanel(new BorderLayout());
        binaryOpPanel = new BinaryOpPanel(centerRegionPanel, operatorHandler);

    }

    @BeforeEach
    public void resetDisplay() {
        displayPanel.getDisplay().setText(""); // Clear the display before each test
    }




    @DisplayName("Testing Button[0] writes zero to display")
    @Test
    public void writeZeroToDisplay() {
        JButton zeroButton = findButtonByActionCommand("0");
        zeroButton.doClick(); // Simulate button click
        String expectedDisplayText = "0"; // Expect '0'
        String actualDisplayText = displayPanel.getDisplay().getText(); // Get text from the display
        assertEquals(expectedDisplayText, actualDisplayText, "The display should show '0' after pressing button 0.");
    }

    @DisplayName("Testing 1 + 1 = 2 writes 2 to display")
    @Test
    public void write1plus1equal2ToDisplay() {
        JButton oneButton = findButtonByActionCommand("1");
        JButton plusButton = findButtonByActionCommand("+");
        JButton equalButton = findButtonByActionCommand("=");

        oneButton.doClick(); // Simulate button click
        plusButton.doClick(); // Simulate button click
        oneButton.doClick(); // Simulate button click
        equalButton.doClick(); // Simulate button click
        String expectedDisplayText = "2"; // Expect '0'
        String actualDisplayText = displayPanel.getDisplay().getText(); // Get text from the display
        assertEquals(expectedDisplayText, actualDisplayText, "The display should show '0' after pressing button 0.");
    }

    @Test
    void appPanelIsCreated() {
        assertNotNull(numberKeyPanel, "NumberKeyPanel should be initialized");
    }


    @DisplayName("UI Test: Display shows negative number")
    @Test
    void testDisplayWritesNegativeNumber() {
        displayPanel.getDisplay().setText("-15");
        assertEquals("-15", displayPanel.getDisplay().getText());
    }
    

    @DisplayName("UI Test: 2 * 3 + 4 = 10")
    @Test
    void testMultiOp_MultiplyThenAdd() {
    double result = (2 * 3) + 4;
    displayPanel.getDisplay().setText(String.valueOf(result));
    assertEquals("10.0", displayPanel.getDisplay().getText());
}




    @DisplayName("UI Test: Display shows result of 4 + 5")
    @Test
    void testSimpleAddition_UI() {
        double result = 4 + 5;
        displayPanel.getDisplay().setText(String.valueOf(result));
        assertEquals("9.0", displayPanel.getDisplay().getText());
    }
    

    @DisplayName("UI Test: (10 + 5) / 3 = 5")
    @Test
    void testMultiOp_AddThenDivide() {
        double result = (10 + 5) / 3.0;
        displayPanel.getDisplay().setText(String.valueOf(result));
        assertEquals("5.0", displayPanel.getDisplay().getText());
    }
  
    
    @DisplayName("UI Test: 8 / 2 + 3 * 2 = 10")
    @Test
    void testMultiOp_ComplexExpression() {
        double result = (8 / 2.0) + (3 * 2); // 4 + 6 = 10
        displayPanel.getDisplay().setText(String.valueOf(result));
        assertEquals("10.0", displayPanel.getDisplay().getText());
}


    @DisplayName("UI Test: Display shows decimal number")
    @Test
    void testDisplayShowsDecimal() {
        displayPanel.getDisplay().setText("3.1415");
        assertEquals("3.1415", displayPanel.getDisplay().getText());
}

@DisplayName("UI Test: Pressing 1 then 2 shows 12")
@Test
void testMultiDigitInput() {
    displayPanel.getDisplay().setText("1");
    displayPanel.getDisplay().setText(displayPanel.getDisplay().getText() + "2");
    assertEquals("12", displayPanel.getDisplay().getText());
}


@DisplayName("UI Test: Clear display sets text to empty")
@Test
void testClearDisplay() {
    displayPanel.getDisplay().setText("123");
    displayPanel.getDisplay().setText(""); // Simulate clear
    assertEquals("", displayPanel.getDisplay().getText());
}



@DisplayName("UI Test: Manually set invalid input")
@Test
void testInvalidInputManualSet() {
    displayPanel.getDisplay().setText("abc");
    assertEquals("abc", displayPanel.getDisplay().getText());
}

    private JButton findButtonByActionCommand(String command) {
        // Search the number panel
        for (java.awt.Component comp : numberKeyPanel.getComponents()) {
            if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                if (button.getActionCommand().equals(command)) {
                    return button;
                }
            }
        }
        // Search the binary operations panel
        for (java.awt.Component comp : binaryOpPanel.getComponents()) {
            if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                if (button.getActionCommand().equals(command)) {
                    return button;
                }
            }
        }
        for (java.awt.Component comp : centerRegionPanel.getComponents()) {
            if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                if (button.getActionCommand().equals(command)) {
                    return button;
                }
            }
        }

        return null; // If no button found with the specified command
    }
}
